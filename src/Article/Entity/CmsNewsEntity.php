<?php

namespace Article\Entity;

use Advert\Service\Adverts;
use Base\Utility\ImageUrl;
use Base\Utility\Tags;
use Zend\ServiceManager\ServiceLocatorAwareInterface;

class CmsNewsEntity extends \Article\Entity\Base\CmsNewsEntityBase implements ServiceLocatorAwareInterface
{

    protected $subtitle;

    protected $gallery_name;

    protected $gallery_active;

    protected $gallery;

    protected $author_name;

    protected $author_surname;

    protected $author_avatar;

    protected $tags;

    protected $photo;

    protected $autor_photo;

    protected $short_photo_description;

    protected $photo_title;

    protected $id_company;

    protected $photo_company;

    protected $company_name;

    protected $company_location;

    protected $company_street;

    protected $company_building;

    protected $company_flat;

    protected $company_postal;

    protected $phone1;

    protected $phone2;

    protected $phone3;

    protected $email;

    protected $website;

    protected $files;

    protected $category_ids;

    protected $category_name;

    protected $serviceLocator;

    public function getGalleryName()
    {
        return $this->gallery_name;
    }
    public function setGalleryName($gallery_name)
    {
        $this->gallery_name = $gallery_name;
        return $this;
    }

    public function getGalleryActive()
    {
        return $this->gallery_active;
    }
    public function setGalleryActive($gallery_active)
    {
        $this->gallery_active = $gallery_active;
        return $this;
    }

    public function getGallery(){

        if(!$this->getGalleryActive()){
            return false;
        }

        if($this->gallery !== null){
            return $this->gallery;
        }

        return $this->gallery = ($this->getServiceLocator()->has('Gallery\Model\CmsGallery') ? $this->getServiceLocator()->get('Gallery\Model\CmsGallery')->getEntity($this->getIdGallery()) : false);
    }

    public function getAuthorName()
    {
        return $this->author_name;
    }
    public function setAuthorName($author_name)
    {
        $this->author_name = $author_name;
        return $this;
    }

    public function getAuthorSurname()
    {
        return $this->author_surname;
    }
    public function setAuthorSurname($author_surname)
    {
        $this->author_surname = $author_surname;
        return $this;
    }

    public function getAuthorAvatar()
    {
        return $this->author_avatar;
    }
    public function setAuthorAvatar($author_avatar)
    {
        $this->author_avatar = empty($author_avatar) ? false : new ImageUrl($author_avatar);
        return $this;
    }

    public function getShortContent()
    {
        return str_replace('{more}', '', parent::getShortContent()); // TODO: Change the autogenerated stub
    }

    public function getTrimmedShortContent($limit = 350){
        $content = parent::getShortContent();
        $contentExp = explode('{more}', $content);
        if(count($contentExp) > 1){
            $content = $contentExp[0];
        }
        $newContent = $result = mb_substr($content, 0, $limit, 'UTF-8');

        if((count($contentExp) > 1) || ($newContent != $content)) {
            $newContent .= ' [...]';
        }
        return $newContent;
    }

    public function getMainPhoto(){
        return $this->photo;
    }

    public function getPhoto()
    {

        return $this->photo ? $this->photo : ($this->getGallery() ? $this->getGallery()->getFirstPhoto()->url() : ($this->photo = new ImageUrl(false)));
    }

    public function setPhoto($photo)
    {

        $this->photo =  empty($photo) ? false : new ImageUrl($photo);
        return $this;
    }

    public function getTags() : Tags
    {
        return $this->tags;
    }
    public function setTags($tags)
    {
        $this->tags = new Tags($tags);
        return $this;
    }

    public function setPhotoTitle($photo_title)
    {
        $this->photo_title = $photo_title;
        return $this;
    }

    public function getPhotoTitle()
    {
        return $this->photo_title;
    }

    public function getShortPhotoDescription()
    {
        return $this->short_photo_description;
    }

    public function setShortPhotoDescription($short_photo_description)
    {
        $this->short_photo_description = $short_photo_description;
        return $this;
    }

    public function setPhotoAuthor($autor_photo)
    {
        $this->autor_photo = $autor_photo;
        return $this;
    }

    public function getPhotoAuthor()
    {
        return $this->autor_photo;
    }

    public function setCategoryIds($category_ids)
    {

        $this->category_ids = empty($category_ids) ? array() : explode(',', $category_ids);

        return $this;
    }

    public function getCategoryIds()
    {
        return $this->category_ids;
    }

    public function setCategoryName($category_name)
    {

        $this->category_name = empty($category_name) ? array() : explode('---', $category_name);

        return $this;
    }

    public function getCategoryName()
    {
        return $this->category_name;
    }

    public function getCategoryIdsWithChild()
    {
        return $this->getServiceLocator()->get('Categories')->getCategoryIdsMakeUpWithChildsIds($this->getCategoryIds());
    }

    public function getCategory(){
        return $this->getServiceLocator()->get('Categories')->getCategoryMakeUpWithParentsByIds($this->getCategoryIds());
    }

    public function getFirstLevelCategory()
    {
        return $this->getServiceLocator()->get('Categories')->getCategoryByIds($this->getCategoryIds());
    }

    public function getMainCategory(){
        foreach($this->getCategoryIds() as $id){
            return $this->getServiceLocator()->get('Categories')->getCategoryById($id);
        }
        return false;
    }

    public function getCompanyId()
    {
        return $this->id_company;
    }

    public function setCompanyId($id_company)
    {
        $this->id_company = $id_company;
        return $this;
    }

    public function setPhotoCompany($photo_company)
    {
        $this->photo_company = $photo_company;
        return $this;
    }

    public function getPhotoCompany()
    {
        return $this->photo_company;
    }

    public function setCompanyName($company_name)
    {
        $this->company_name = $company_name;
        return $this;
    }

    public function getCompanyName()
    {
        return $this->company_name;
    }

    public function getCompanyUrl()
    {
        return $this->getServiceLocator()->get('viewhelpermanager')->get('url')->__invoke('companydetail', array('id' => $this->getCompanyId()));
    }

    public function setCompanyLocation($company_location)
    {
        $this->company_location = $company_location;
        return $this;
    }

    public function getCompanyLocation()
    {
        return $this->company_location;
    }

    public function setCompanyStreet($company_street)
    {
        $this->company_street = $company_street;
        return $this;
    }

    public function getCompanyStreet()
    {
        return $this->company_street;
    }

    public function setCompanyBuilding($company_building)
    {
        $this->company_building = $company_building;
        return $this;
    }

    public function getCompanyBuilding()
    {
        return $this->company_building;
    }

    public function setCompanyFlat($company_flat)
    {
        $this->company_flat = $company_flat;
        return $this;
    }

    public function getCompanyFlat()
    {
        return $this->company_flat;
    }

    public function setWebsite($website)
    {
        $this->website = $website;
        return $this;
    }

    public function getWebsite()
    {
        return $this->website;
    }

    public function setEmail($email)
    {
        $this->email = $email;
        return $this;
    }

    public function getEmail()
    {
        return $this->email;
    }

    public function setCompanyPostal($company_postal)
    {
        $this->company_postal= $company_postal;
        return $this;
    }

    public function getCompanyPostal()
    {
        return $this->company_postal;
    }

    public function getSubtitle()
    {
        return $this->subtitle;
    }
    public function setSubtitle($subtitle)
    {
        $this->subtitle = $subtitle;
        return $this;
    }

    public function setPhone1($phone1)
    {
        $this->phone1 = $phone1;
        return $this;
    }

    public function getPhone1()
    {
        return $this->phone1;
    }
    public function setPhone2($phone2)
    {
        $this->phone2 = $phone2;
        return $this;
    }

    public function getPhone2()
    {
        return $this->phone2;
    }

    public function setPhone3($phone3)
    {
        $this->phone3 = $phone3;
        return $this;
    }

    public function getPhone3()
    {
        return $this->phone3;
    }

    public function prepareContentWithAdverts(Adverts $adverts){

        $contentExp = explode('{advert}', parent::getContent());

        $countContentExp = count($contentExp);
        if($countContentExp === 1){
            return $this;
        }
        $i = 0;
        foreach($contentExp as &$contentPart){$i++;

            if($i === $countContentExp){
                continue;
            }

            $advert = $adverts->getBaneryMiejscaEntityBySlug(($this->getServiceLocator()->get('mobileDetect')->isMobile() ? 'mobile_' : '').'artykul_tresc_'.$i);

            if($advert){
                $contentPart .=  $this->getServiceLocator()->get('viewhelpermanager')->get('partial')->__invoke('advert/advertArticle.phtml', array('pg' => $this, 'advert' => $advert));
            }

        }
        $this->setContent(implode('', $contentExp));
        return $this;
    }

    public function getContent()
    {
        return str_replace(array('{advert}'), array(''), parent::getContent());
    }

    public function getFiles(){

        if($this->files !== null){
            return $this->files;
        }

        return $this->files = $this->getServiceLocator()->get('Article\Model\CmsNewsFiles')->getByNews($this);

    }

    public function getFilesByType($type){
        $ret = array();
        foreach($this->getFiles() as $file){
            if($file->getTyp() === $type){
                $ret[] = $file;
            }
        }
        return $ret;
    }

    public function getServiceLocator() {
        return $this->serviceLocator;
    }

    public function setServiceLocator(\Zend\ServiceManager\ServiceLocatorInterface $serviceLocator) {

        $this->serviceLocator = $serviceLocator;

        return $this;
    }
}